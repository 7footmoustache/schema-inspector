{"name":"Schema-inspector","tagline":"Schema-Inspector is a powerful tool to sanitize and validate JS objects.","body":"# Schema-Inspector\r\n\r\nSchema-Inspector is a powerful tool to sanitize and validate JS objects.\r\nIt's disigned to work both client-side and server-side and to be scalable with allowing asynchronous and synchronous calls.\r\n\r\n## Installation\r\n\r\n### Node.js\r\n<pre>npm install schema-inspector</pre>\r\n\r\n### Browser\r\nDownload [async.js](https://raw.github.com/caolan/async/master/lib/async.js) and [schema-inspetor.js](https://raw.github.com/Atinux/schema-inspector/master/lib/schema-inspector.js) and use it like this:\r\n```html\r\n<script type=\"text/javascript\" src=\"async.js\"></script>\r\n<script type=\"text/javascript\" src=\"schema-inspector.js\"></script>\r\n```\r\n\r\n## Usage\r\n\r\n### Synchronous call\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'string', eq: 'ipsum' },\r\n\t\tdolor: {\r\n\t\t\ttype: 'array',\r\n\t\t\titems: { type: 'number' }\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar candidate = {\r\n\tlorem: 'not_ipsum',\r\n\tdolor: [ 12, 34, 'ERROR', 45, 'INVALID' ]\r\n};\r\nvar result = inspector.validate(schema, candidate); // Candidate is not valid\r\nconsole.log(result.format());\r\n/*\r\n\tProperty @.lorem: must be equal to \"ipsum\", but is equal to \"not_ipsum\"\r\n\tProperty @.dolor[2]: must be number, but is string\r\n\tProperty @.dolor[4]: must be number, but is string\r\n*/\r\n```\r\n\r\n### Asynchronous call\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = { ...\t};\r\n\r\nvar candidate = { ... };\r\n\r\ninspector.validate(schema, candidate, function (err, result) {\r\n\tconsole.log(result.format());\r\n\t/*\r\n\t\tProperty @.lorem: must be equal to \"ipsum\", but is equal to \"not_ipsum\"\r\n\t\tProperty @.dolor[2]: must be number, but is string\r\n\t\tProperty @.dolor[4]: must be number, but is string\r\n\t*/\r\n});\r\n```\r\n\r\n### Custom fields\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'array',\r\n\titems: { type: 'number', $divisibleBy: 5 }\r\n};\r\n\r\nvar custom = {\r\n\tdivisibleBy: function (schema, candidate) {\r\n\t\tvar dvb = schema.$divisibleBy;\r\n\t\tif (candidate % dvb !== 0) {\r\n\t\t\tthis.report('must be divisible by ' + dvb);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar candidate = [ 5, 10, 15, 16 ];\r\nvar result = inspector.validate(schema, candidate, custom);\r\nconsole.log(result.format());\r\n/*\r\n\tProperty @[3]: must be divisible by 5\r\n*/\r\n```\r\n\r\n## In the browser\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"async.js\"></script>\r\n<script type=\"text/javascript\" src=\"schema-inspetor.js\"></script>\r\n<script type=\"text/javascript\">\r\n\tvar schema = {\r\n\t\ttype: 'object',\r\n\t\tproperties: {\r\n\t\t\tlorem: { type: 'string', eq: 'ipsum' },\r\n\t\t\tdolor: {\r\n\t\t\t\ttype: 'array',\r\n\t\t\t\titems: { type: 'number' }\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar candidate = {\r\n\t\tlorem: 'not_ipsum',\r\n\t\tdolor: [ 12, 34, 'ERROR', 45, 'INVALID' ]\r\n\t};\r\n\tSchemaInspector.validate(schema, candidate, function (err, result) {\r\n\t\talert(result.format());\r\n\t});\r\n</script>\r\n```\r\n\r\n## Documentation\r\n\r\n### Validation\r\n\r\n* [type](#v_type)\r\n* [optional](#v_optional)\r\n* [pattern](#v_pattern)\r\n* [minLength, maxLength, exactLength](#v_length)\r\n* [lt, lte, gt, gte, eq, ne](#v_comparators)\r\n* [someKeys](#v_someKeys)\r\n* [strict](#v_strict)\r\n* [exec](#v_exec)\r\n* [properties](#v_properties)\r\n* [items](#v_items)\r\n* [alias](#v_alias)\r\n* [error](#v_error)\r\n\r\n### Sanitization\r\n\r\n* [type](#s_type)\r\n* [def](#s_def)\r\n* [optional](#s_optional)\r\n* [rules](#s_rules)\r\n* [min, min](#s_comparators)\r\n* [minLength, maxLength](#s_length)\r\n* [exec](#s_exec)\r\n* [properties](#s_properties)\r\n* [items](#s_items)\r\n\r\n### Custom fields\r\n* [punctual use](#cf_punctual)\r\n* [extension](#cf_extension)\r\n* [context](#cf_context)\r\n\r\n### Asynchronous call\r\n* [How to](#a_howTo)\r\n\r\n### Thanks to:\r\n* [Benjamin Gressier](https://twitter.com/NikitaJS) (major contributor of this awesome module)\r\n\r\n## Validation\r\n\r\n<a name=\"v_type\" />\r\n### type\r\n\r\n* **type**: string, array of string.\r\n* **usable on**: any.\r\n* **possible values**\r\n\t* `string`\r\n\t* `number`\r\n\t* `integer`\r\n\t* `boolean`\r\n\t* `null`\r\n\t* `date` (constructor === Date)\r\n\t* `object` (constructor === Object)\r\n\t* `array` (constructor === Array)\r\n\t* `any` (it can be anything)\r\n\r\nAllow to check property type. If the given value is incorrect, then type is not\r\nchecked.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: {  type: 'number' },\r\n\t\tipsum: { type: 'any' },\r\n\t\tdolor: { type: ['number' 'string', 'null'] }\r\n\t}\r\n};\r\n\r\nvar c1 = {\r\n\tlorem: 12,\r\n\tipsum: 'sit amet',\r\n\tdolor: 23\r\n};\r\nvar c2 = {\r\n\tlorem: 12,\r\n\tipsum: 34,\r\n\tdolor: 'sit amet'\r\n};\r\nvar c3 = {\r\n\tlorem: 12,\r\n\tipsum: [ 'sit amet' ],\r\n\tdolor: null\r\n};\r\nvar c4 = {\r\n\tlorem: '12',\r\n\tipsum: 'sit amet',\r\n\tdolor: new Date()\r\n};\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Valid\r\ninspector.validate(schema, c3); // Valid\r\ninspector.validate(schema, c4); // Invalid: @.lorem must be a number, @dolor must be a number, a string or null\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_optional\" />\r\n### optional\r\n\r\n* **type**: boolean.\r\n* **default**: false.\r\n* **usable on**: any.\r\n\r\nThis field indicates whether or not property has to exist.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema1 = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'any', optional: true }\r\n\t}\r\n};\r\n\r\nvar schema2 = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'any', optional: false } // default value\r\n\t}\r\n};\r\n\r\nvar c1 = { lorem: 'ipsum' };\r\nvar c2 = { };\r\n\r\ninspector.validate(schema1, c1); // Valid\r\ninspector.validate(schema1, c2); // Valid\r\ninspector.validate(schema2, c1); // Valid\r\ninspector.validate(schema2, c2); // Invalid: \"@.lorem\" is missing and not optional\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_uniqueness\" />\r\n### uniqueness\r\n\r\n* **type**: boolean.\r\n* **default**: false.\r\n* **usable on**: array, string.\r\n\r\nIf true, then we ensure no element in candidate exists more than once.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'array',\r\n\tuniqueness: true\r\n};\r\n\r\nvar c1 = [12, 23, 34, 45];\r\nvar c2 = [12, 23, 34, 12];\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Invalid: 12 exists twice in @.\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_pattern\" />\r\n### pattern\r\n\r\n* **type**: string, RegExp object, array of string and RegExp.\r\n* **usable on**: string.\r\n* Possible values as a string: `void`, `url`, `date-time`, `date`,\r\n`coolDateTime`, `time`, `color`, `email`, `numeric`, `integer`, `decimal`,\r\n`alpha`, `alphaNumeric`, `alphaDash`, `javascript`, `upperString`, `lowerString`.\r\n\r\nAsk Schema-Inspector to check whether or not a given matches provided patterns.\r\nWhen a pattern is a RegExp, it directly test the string with it. When it's a\r\nstring, it's an alias of a RegExp.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema1 = {\r\n\ttype: 'array',\r\n\titems: { type: 'string', pattern: /^[A-C]/ }\r\n};\r\n\r\nvar c1 = ['Alorem', 'Bipsum', 'Cdolor', 'DSit amet'];\r\n\r\nvar schema2 = {\r\n\ttype: 'array',\r\n\titems: { type: 'string', pattern: 'email' }\r\n};\r\n\r\nvar c2 = ['lorem@ipsum.com', 'dolor@sit.com', 'amet@consectetur'];\r\n\r\ninspector.validate(schema1, c1); // Invalid: @[3] ('DSit amet') does not match /^[A-C]/\r\ninspector.validate(schema2, c2); // Invalid: @[2] ('amet@consectetur') does not match \"email\" pattern.\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_length\" />\r\n### minLength, maxLength, exactLength\r\n\r\n* **type**: integer.\r\n* **usable on**: array, string.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'string', minLength: 4, maxLength: 8 },\r\n\t\tipsum: { type: 'array', exactLength: 6 },\r\n\t}\r\n};\r\nvar c1 = {\r\n\tlorem: '12345',\r\n\tipsum: [1, 2, 3, 4, 5, 6]\r\n};\r\n\r\nvar c2 = {\r\n\tlorem: '123456789',\r\n\tipsum: [1, 2, 3, 4, 5]\r\n};\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Invalid: @.lorem must have a length between 4 and 8 (here 9)\r\n// and @.ipsum must have a length of 6 (here 5)\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_comparators\" />\r\n### lt, lte, gt, gte, eq, ne\r\n\r\n* **type**: number.\r\n* **usable on**: number.\r\n\r\nCheck whether comparison is true:\r\n\r\n* lt: `<`\r\n* lte: `<=`\r\n* gt: `>`\r\n* gte: `>=`\r\n* eq: `===`\r\n* ne: `!==`\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'number', gt: 0, lt: 5 }, // Between ]0; 5[\r\n\t\tipsum: { type: 'number', gte: 0, lte: 5 }, // Between [0; 5]\r\n\t\tdolor: { type: 'number', eq: [0, 3, 6, 9] }, // Equal to 0, 3, 6 or 9\r\n\t\tsit: { type: 'number', ne: [0, 3, 6, 9] } // Not equal to 0, 3, 6 nor 9\r\n\t}\r\n};\r\n\r\nvar c1 = { lorem: 3, ipsum: 0, dolor: 6, sit: 2 };\r\nvar c2 = { lorem: 0, ipsum: -1, dolor: 5, sit: 3 };\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Invalid\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_someKeys\" />\r\n### someKeys\r\n\r\n* **type**: array of string.\r\n* **usable on**: object.\r\n\r\nCheck whether one of the given keys exists in object (useful when they are\r\noptional).\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tsomeKeys: ['lorem', 'ipsum']\r\n\tproperties: {\r\n\t\tlorem: { type: 'any', optional: true },\r\n\t\tipsum: { type: 'any', optional: true },\r\n\t\tdolor: { type: 'any' }\r\n\t}\r\n};\r\n\r\nvar c1 = { lorem: 0, ipsum: 1, dolor: 2  };\r\nvar c2 = { lorem: 0, dolor: 2  };\r\nvar c3 = { dolor: 2  };\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Valid\r\ninspector.validate(schema, c3); // Invalid: Neither @.lorem nor @.ipsum is in c3.\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_strict\" />\r\n### strict\r\n\r\n* **type**: boolean.\r\n* **default**: false.\r\n* **usable on**: object.\r\n\r\nOnly key provided in field \"properties\" may exist in object.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tstrict: true,\r\n\tproperties: {\r\n\t\tlorem: { type: 'any' },\r\n\t\tipsum: { type: 'any' },\r\n\t\tdolor: { type: 'any' }\r\n\t}\r\n};\r\n\r\nvar c1 = { lorem: 0, ipsum: 1, dolor: 2  };\r\nvar c2 = { lorem: 0, ipsum: 1, dolor: 2, sit: 3  };\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Invalid: @.sit should not exist.\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_exec\" />\r\n### exec\r\n\r\n* **type**: function, array of function.\r\n* **usable on**: any.\r\n\r\nCustom checker =). \"exec\" functions take two three parameter\r\n(schema, post [, callback]). To report an error, use `this.report([message])`.\r\nVery useful to make some custom validation.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: {\r\n\t\t\ttype: 'number',\r\n\t\t\texec: function (schema, post) {\r\n\t\t\t\t// here scheme === schema.properties.lorem and post === @.lorem\r\n\t\t\t\tif (post === 3) {\r\n\t\t\t\t\t// As soon as `this.report()` is called, candidate is not valid.\r\n\t\t\t\t\tthis.report('must not equal 3 =('); // Ok...it's exactly like \"ne: 3\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar c1 = { lorem: 2 };\r\nvar c2 = { lorem: 3 };\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Invalid: \"@.lorem must not equal 3 =(\".\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_properties\" />\r\n### properties\r\n\r\n* **type**: object.\r\n* **usable on**: object.\r\n\r\nFor each property in the field \"properties\", whose value must be a schema,\r\nvalidation is called deeper in object.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: {\r\n\t\t\ttype: 'object',\r\n\t\t\tproperties: {\r\n\t\t\t\tipsum: {\r\n\t\t\t\t\ttype: 'object',\r\n\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\tdolor: { type: 'string' }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tconsectetur: { type: 'string' }\r\n\t}\r\n};\r\n\r\nvar c1 = {\r\n\tlorem: {\r\n\t\tipsum: {\r\n\t\t\tdolor: 'sit amet'\r\n\t\t}\r\n\t},\r\n\tconsectetur: 'adipiscing elit'\r\n};\r\nvar c2 = {\r\n\tlorem: {\r\n\t\tipsum: {\r\n\t\t\tdolor: 12\r\n\t\t}\r\n\t},\r\n\tconsectetur: 'adipiscing elit'\r\n};\r\n\r\ninspector.validate(schema, c1); // Valid\r\ninspector.validate(schema, c2); // Invalid: @.lorem.ipsum.dolor must be a string.\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_items\" />\r\n### items\r\n\r\n* **type**: object, array of object.\r\n* **usable on**: array.\r\n\r\nAllow to apply schema validation for each element in an array. If it's an\r\nobject, then it's a schema which will be used for all the element. If it's an\r\narray of object, then it's an array of schema and each element in an array will\r\nbe checked with the schema which has the same position in the array.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema1 = {\r\n\ttype: 'array',\r\n\titems: { type: 'number'\t}\r\n};\r\n\r\nvar schema2 = {\r\n\ttype: 'array',\r\n\titems: [\r\n\t\t{ type: 'number' },\r\n\t\t{ type: 'number' },\r\n\t\t{ type: 'string' }\r\n\t]\r\n};\r\n\r\nvar c1 = [1, 2, 3];\r\nvar c2 = [1, 2, 'string!'];\r\n\r\n\r\ninspector.validate(schema1, c1); // Valid\r\ninspector.validate(schema1, c2); // Invalid: @[2] must be a number.\r\ninspector.validate(schema2, c1); // Valid\r\ninspector.validate(schema2, c2); // Invalid: @[2] must be a string.\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_alias\" />\r\n### alias\r\n\r\n* **type**: string.\r\n* **usable on**: any.\r\n\r\nAllow to display a more explicit property name if an error is encounted.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema1 = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\t_id: { type: 'string'}\r\n\t}\r\n};\r\n\r\nvar schema2 = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\t_id: { alias: 'id', type: 'string'}\r\n\t}\r\n};\r\n\r\nvar c1 = { _id: 1234567890 };\r\n\r\nvar r1 = inspector.validate(schema1, c1);\r\nvar r2 = inspector.validate(schema2, c1);\r\nconsole.log(r1.format()); // Property @._id: must be string, but is number\r\nconsole.log(r2.format()); // Property id (@._id): must be string, but is number\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"v_error\" />\r\n### error\r\n\r\n* **type**: string.\r\n* **usable on**: any.\r\n\r\nThis field contains a user sentence for displaying a more explicit message if\r\nan error is encounted.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema1 = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\t_id: { type: 'string' }\r\n\t}\r\n};\r\n\r\nvar schema2 = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\t_id: { type: 'string', error: 'must be a valid ID.' }\r\n\t}\r\n};\r\n\r\nvar c1 = { _id: 1234567890 };\r\n\r\nvar r1 = SchemaInspector.validate(schema1, c1);\r\nvar r2 = SchemaInspector.validate(schema2, c1);\r\nconsole.log(r1.format()); // Property @._id: must be string, but is number.\r\nconsole.log(r2.format()); // Property @._id: must be a valid ID.\r\n```\r\n\r\n## Sanitization\r\n\r\n<a name=\"s_type\" />\r\n### type\r\n\r\n* **type**: string.\r\n* **usable on**: any.\r\n* **possible values**\r\n\t* `number`\r\n\t* `integer`\r\n\t* `string`\r\n\t* `boolean`\r\n\t* `date` (constructor === Date)\r\n\t* `object` (constructor === Object)\r\n\r\nCast property to the given type according to the following description:\r\n* **to number from**:\r\n\t* string\t\t\t(\"12.34\": 12.34)\r\n* **to integer from**:\r\n\t* number \t\t\t(12.34: 12)\r\n\t* string\t\t\t(\"12.34\": 12)\r\n\t* boolean\t\t\t(true: 1, false: 0)\r\n* **to string from**:\r\n\t* boolean\t\t\t\t(true: \"true\")\r\n\t* number\t\t\t\t(12.34: \"12.34\")\r\n\t* integer\t\t\t\t(12: \"12\")\r\n\t* date\t\t\t\t\t([object Date]: \"Mon Feb 25 2013 12:03:25 GMT+0100 (CET)\")\r\n\t* array\t\t\t\t\t([12, 23, 44]: '12,34,45')\r\n* **to date from**:\r\n\t* number\t\t\t\t(1361790386000 -> Mon Feb 25 2013 12:06:26 GMT+0100 (CET))\r\n\t* string\t\t\t\t(\"2013-02-25T11:06:26.704Z\" -> Mon Feb 25 2013 12:06:26 GMT+0100 (CET))\r\n\t\t\t\t\t\t\t\t\t(\"Mon Feb 25 2013 12:06:26 GMT+0100 (CET)\" -> Mon Feb 25 2013 12:06:26 GMT+0100 (CET))\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'array',\r\n\titems: { type: 'string' }\r\n};\r\n\r\nvar c = [12.23, -34, true, false, 'true', 'false', [123, 234, 345]];\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: ['12.23', '-34', 'true', 'false', 'true', 'false', '123,234,345']\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_def\" />\r\n### def\r\n* **type**: any.\r\n* **usable on**: any.\r\n\r\nDefine default value if property does not exist, or if type casting is to fail\r\nbecause entry type is not valid (cf [type](#s_type)).\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'number', def: 10 },\r\n\t\tipsum: { type: 'string', def: 'NikitaJS', optional: false },\r\n\t\tdolor: { type: 'string' }\r\n\t}\r\n};\r\n\r\nvar c = {\r\n\tlorem: [12, 23],\t// convertion to number is about to fail\r\n\t\t\t\t\t\t\t\t\t\t// (array -> number is not possible)\r\n\t\t\t\t\t\t\t\t\t\t// ipsum is not privided\r\n\tdolor: 'sit amet' // \"dolor\" is already a string\r\n};\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: {\r\n\t\tlorem: 10,\r\n\t\tipsum: 'NikitaJS',\r\n\t\tdolor: 'sit amet'\r\n\t}\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_optional\" />\r\n### optional\r\n\r\n* **type**: boolean.\r\n* **default**: true.\r\n* **usable on**: any.\r\n\r\nProperty is set to `schema.def` if not provided and if optional is `false`.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'number', optional: false, def: 12 },\r\n\t\tipsum: { type: 'string', optional: true, def: 23 },\r\n\t\tdolor: { type: 'string', def: 'NikitaJS, def: 34 } // (optional: true)\r\n\t}\r\n};\r\n\r\nvar c = { };\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: {\r\n\t\tlorem: 12 // Only lorem is set to 12 because it is not optional.\r\n\t}\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_rules\" />\r\n### rules\r\n\r\n* **type**: string, array of string.\r\n* **usable on**: string.\r\n* **possible values**:\r\n\t* `upper`: Every character will be changed to uppercase.\r\n\t* `lower`: Every character will be changed to lowercase.\r\n\t* `title`: For each word (/\\S*/g), first letter will be changed to uppercase, and the rest to lowercase.\r\n\t* `capitalize`: Only the first letter of the string will be changed to uppercase, the rest to lowercase.\r\n\t* `ucfirst`: Only the first letter of the string will be changed to uppercase, the rest is not modified.\r\n\t* `trim`: Remove extra spaces.\r\n\r\nApply the given rule to a string. If several rules are given (array), then they\r\nare applied in the same order than in the array.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'string', rules: 'upper' },\r\n\t\tipsum: { type: 'string', rules: [ 'trim', 'title'] }\r\n\t}\r\n};\r\n\r\nvar c = {\r\n\tlorem: ' tHiS is sParTa! ',\r\n\tipsum: '   tHiS is sParTa!    '\r\n};\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: {\r\n\t\tlorem: ' THIS IS SPARTA! ',\r\n\t\tipsum: 'This Is Sparta!' // has been trimed, then titled\r\n\t}\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_comparators\" />\r\n### min, max\r\n\r\n* **type**: string, number.\r\n* **usable on**: string, number.\r\n\r\nDefine minimum and maximum value for a property. If it's less than minimum,\r\nthen it's set to minimum. If it's greater than maximum, then it's set to\r\nmaximum.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'array',\r\n\titems: { type: 'number', min: 10, max: 20 }\r\n};\r\n\r\nvar c = [5, 10, 15, 20, 25];\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: [10, 10, 15, 20, 20]\r\n\tc[0] (5) was less than min (10), so it's been set to 10.\r\n\tc[4] (25) was greater than max (20), so it's been set to 20.\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_length\" />\r\n### minLength, maxLength\r\n\r\n* **type**: integer.\r\n* **usable on**: string.\r\n\r\nAdjust string length to the given number.\r\n\r\n__TODO:__ We must be able to choose which character we want to fill the string with.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'array',\r\n\titems: { type: 'string', minLength: 8, maxLength: 11 }\r\n};\r\n\r\nvar c = ['short', 'mediumSize', 'tooLongForThisSchema'];\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: ['short---', 'mediumSize', 'tooLongForT']\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_exec\" />\r\n### exec\r\n\r\n* **type**: function, array of functions.\r\n* **usable on**: any.\r\n\r\nCustom checker =). \"exec\" functions take two three parameter\r\n(schema, post [, callback]), and must return the new value. To report an\r\nsanitization, use `this.report([message])`. Very useful to make some custom\r\nsanitization.\r\n\r\n__NB:__ If you don't want to return a differant value, simply return `post`,\r\ndo not return nothing (if you do so, the new value will be `undefined`).\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'array',\r\n\titems: {\r\n\t\ttype: 'string',\r\n\t\texec: function (schema, post) {\r\n\t\t\tif (typeof post === 'string' && !/^nikita$/i.test(post)) {\r\n\t\t\t\tthis.report();\r\n\t\t\t\treturn '_INVALID_';\r\n\t\t\t}\r\n\t\t\treturn post;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar c = [ 'Nikita', 'lol', 'NIKITA', 'thisIsGonnaBeSanitized!' ];\r\n\r\nvar r = SchemaInspector.sanitize(schema, c);\r\n/*\r\n\tc: [ 'Nikita', '_INVALID_', 'NIKITA', '_INVALID_' ]\r\n*/\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_properties\" />\r\n### properties\r\n\r\n* **type**: object.\r\n* **usable on**: object.\r\n\r\nWork the same way as [validation \"properties\"](#v_properties).\r\n\r\n---------------------------------------\r\n\r\n<a name=\"s_items\" />\r\n### items\r\n\r\n* **type**: object, array of object.\r\n* **usable on**: array.\r\n\r\nWork the same way as [validation \"items\"](#v_items).\r\n\r\n## Custom fields\r\n\r\n<a name=\"cf_punctual\" />\r\n### punctual use\r\n\r\nWhen you need to use the same function in `exec` field several time, instead of\r\nsaving the function and declaring `exec` several times, just use custom field.\r\nFirst you have to provide a hash containing a function for each custom field you\r\nwant to inject. Then you can call them in your schema with $\"your field name\".\r\nFor example if you\r\nprovide a custom field called \"superiorMod\", you can access it with name\r\n\"$superiorMod\".\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'number', $divisibleBy: 5 },\r\n\t\tipsum: { type: 'number', $divisibleBy: 3 }\r\n\t}\r\n};\r\n\r\nvar custom = {\r\n\tdivisibleBy: function (schema, candidate) {\r\n\t\tvar dvb = schema.$divisibleBy;\r\n\t\tif (cndidate % dvb !== 0) {\r\n\t\t\tthis.report('must be divisible by ' + dvb);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar c = {\r\n\tlorem: 10,\r\n\tipsum: 8\r\n};\r\ninspector.validate(schema, candidate, custom); // Invalid: \"@.ipsum must be divisible by 3\"\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"cf_extension\" />\r\n### extension\r\n\r\nSometime you want to use a custom field everywhere in your programme, so you may\r\nextend Schema-Inspector to do so. Just call the method\r\n_inspector.Validation.extend(customFieldObject)_ or\r\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\r\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\r\nspecific field by calling _inspector.Validation.remove(field)_ or\r\n_inspector.Sanitization.remove(field)_.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar custom = {\r\n\tdivisibleBy: function (schema, candidate) {\r\n\t\tvar dvb = schema.$divisibleBy;\r\n\t\tif (cndidate % dvb !== 0) {\r\n\t\t\tthis.report('must be divisible by ' + dvb);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'number', $divisibleBy: 5 },\r\n\t\tipsum: { type: 'number', $divisibleBy: 3 }\r\n\t}\r\n};\r\n\r\ninspector.Validation.extend(custom);\r\n\r\nvar candidate = {\r\n\tlorem: 10,\r\n\tipsum: 8\r\n};\r\n\r\ninspector.validate(schema, candidate);\r\n/*\r\n\tAs you can see, no more object than schema and candidate has been provided.\r\n\tTherefore we can use `$divisibleBy` everywhere in all schemas, for each\r\n\tinspector.validate() call.\r\n*/\r\n```\r\n\r\n<a name=\"cf_context\" />\r\n### Context\r\n\r\nEvery function you declare as a custom parameter, or with `exec` field will be\r\ncalled with a context. This context allow you to access properties, like\r\n`this.report()` function, but also `this.origin`, which is equal to the object\r\nsent to `inspector.validate()` or `inspector.sanitize()`.\r\n\r\n__Example__\r\n\r\n```javascript\r\n// ...\r\nvar schema = { ... };\r\nvar custom = {\r\n\tdivisibleBy: function (schema, candidate) {\r\n\t\t// this.origin === [12, 23, 34, 45]\r\n\t\t// ...\r\n\t}\r\n};\r\nvar candidate = [12, 23, 34, 45];\r\nvar result = inspector.validate(schema, candidate, custom);\r\n// ...\r\n```\r\n\r\n## Asynchronous call\r\n\r\n<a name=\"a_howTo\" />\r\n### How to\r\n\r\nAll the example above used synchronous call (the simplest). But sometime you\r\nwant to call validation or sanitization asynchronously, in particular with\r\n`exec` and custom fields. It's pretty simple: To do so, just send a callback\r\nas extra parameter. It takes 2 parameters: error and result. Actually\r\nSchema-Inspector should send back no error as it should not throw any if called\r\nsynchronously. But if you want to send back and error in your custom function,\r\ninspection will be interrupted, and you will be able to retrieve it in your\r\ncallback.\r\n\r\nYou also have to declare a callback in your `exec` or custom function to make\r\nSchema-Inspector call it asynchronously, else it will be call synchronously.\r\nThat means you may use `exec` synchronous function normally even during\r\nand asynchronous call.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = { ...\t};\r\nvar candidate = { ... };\r\n\r\ninspector.validate(schema, candidate, function (err, result) {\r\n\tconsole.log(result.format());\r\n});\r\n```\r\n\r\n__Example with custom field__\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = { ...\t};\r\nvar candidate = { ... };\r\nvar custom = { ... };\r\n\r\ninspector.validate(schema, candidate, custom, function (err, result) {\r\n\tconsole.log(result.format());\r\n});\r\n```\r\n\r\nHere a full example where you may have to use it:\r\n\r\n```javascript\r\nvar inspector = require('schema-inspector');\r\n\r\nvar schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tlorem: { type: 'number', $divisibleBy: 4 },\r\n\t\tipsum: { type: 'number', $divisibleBy: 5 },\r\n\t\tdolor: { type: 'number', $divisibleBy: 0, optional: true }\r\n\t}\r\n};\r\n\r\nvar custom = {\r\n\tdivisibleBy: function (schema, candidate, callback) { // Third parameter is declared:\r\n\t\t// Schema-Inspector will wait this function to call this `callback` to keep running.\r\n\t\tvar dvb = schema.$divisibleBy;\r\n\t\tif (typeof dvb !== 'number' || typeof candidate !== 'number') {\r\n\t\t\treturn callback();\r\n\t\t}\r\n\t\tvar self = this;\r\n\t\tprocess.nextTick(function () {\r\n\t\t\tif (dvb === 0) {\r\n\t\t\t\treturn callback(new Error('Schema error: Divisor must not equal 0'));\r\n\t\t\t}\r\n\t\t\tvar r = candidate / dvb;\r\n\t\t\tif ((r | 0) !== r)  {\r\n\t\t\t\tself.report('should be divisible by ' + dvb);\r\n\t\t\t}\r\n\t\t\tcallback();\r\n\t\t});\r\n\t}\r\n};\r\n\r\nvar candidate = {\r\n\tlorem: 12,\r\n\tipsum: 25\r\n};\r\n\r\ninspector.validate(schema, candidate, custom, function (err, result) {\r\n\tconsole.log(result.format());\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}